//**********************************************************************
// Copyright Patrick Sweeney 2015-2020
// Licensed under the MIT license.
// See file LICENSE for details.
//**********************************************************************
#pragma once
#include "GPUPipeline.h"
#include "Base\Core\RefCount.h"
#include "Rendering\Caustic\Caustic.h"
#include <vector>
#include <atlbase.h>
#include <d3d11.h>

namespace Caustic
{
    //**********************************************************************
    // Class: CGPUPipelineNodeBase
    // Define the base class for nodes in our pipeline
    //**********************************************************************
    class CGPUPipelineNodeBase : public CRefCount
    {
    protected:
        uint32 m_numInputs; // Number of inputs expected by this node
        std::vector<IGPUPipelineNode*> m_sourceNodes; // Weak reference to IGPUPipelineNode
        uint32 m_width; // Width of output generated by this node
        uint32 m_height; // Height of output generated by this node
        CRefObj<ITexture> m_spOutputTexture;
        CRefObj<IShader> m_spShader;
        D3D11_CPU_ACCESS_FLAG m_cpuFlags;
        D3D11_BIND_FLAG m_bindFlags;
    public:
        CGPUPipelineNodeBase(uint32 numInputs)
        {
            m_numInputs = numInputs;
            m_sourceNodes.resize(numInputs);
            m_cpuFlags = (D3D11_CPU_ACCESS_FLAG)0;
            m_bindFlags = (D3D11_BIND_FLAG)0;
        }
        
        //**********************************************************************
        // IGPUPipelineNode
        //**********************************************************************
        void SetShader(IShader* pShader);
        CRefObj<IShader> GetShader();
        uint32 GetNumberInputs() { return m_numInputs; }
        CRefObj<IGPUPipelineNode> GetInput(uint32 index);
        void SetInput(uint32 index, IGPUPipelineNode*pNode);
        void SetOutputSize(uint32 width, uint32 height) { m_width = width; m_height = height; };
        uint32 GetOutputWidth() { return m_width; }
        uint32 GetOutputHeight() { return m_height; }
        CRefObj<ITexture> GetOutputTexture(IGPUPipeline* pPipeline);
        void Process(IGPUPipeline* pPipeline);
    };

    //**********************************************************************
    // Class: CGPUPipelineNode
    // Define class that implement IGPUPipelineNode
    //**********************************************************************
    class CGPUPipelineNode : public CGPUPipelineNodeBase, public IGPUPipelineNode
    {
    public:
        CGPUPipelineNode(uint32 numInputs) : CGPUPipelineNodeBase(numInputs)
        {
            m_cpuFlags = (D3D11_CPU_ACCESS_FLAG)0;
            m_bindFlags = (D3D11_BIND_FLAG)(D3D11_BIND_FLAG::D3D11_BIND_RENDER_TARGET | D3D11_BIND_FLAG::D3D11_BIND_SHADER_RESOURCE);
        }
        
        //**********************************************************************
        // IRefCount
        //**********************************************************************
        virtual uint32 AddRef() override { return CRefCount::AddRef(); }
        virtual uint32 Release() override { return CRefCount::Release(); }

        //**********************************************************************
        // IGPUPipelineNode
        //**********************************************************************
        virtual uint32 GetNumberInputs() override { return CGPUPipelineNodeBase::GetNumberInputs(); }
        virtual void SetShader(IShader *pShader) override { CGPUPipelineNodeBase::SetShader(pShader); }
        virtual CRefObj<IShader> GetShader() override { return CGPUPipelineNodeBase::GetShader(); }
        virtual CRefObj<IGPUPipelineNode> GetInput(uint32 index) override { return CGPUPipelineNodeBase::GetInput(index); }
        virtual void SetInput(uint32 index, IGPUPipelineNode *pNode) override { CGPUPipelineNodeBase::SetInput(index, pNode); }
        virtual void SetOutputSize(uint32 width, uint32 height) override { CGPUPipelineNodeBase::SetOutputSize(width, height); }
        virtual uint32 GetOutputWidth() override { return CGPUPipelineNodeBase::GetOutputWidth(); }
        virtual uint32 GetOutputHeight() override { return CGPUPipelineNodeBase::GetOutputHeight(); }
        virtual CRefObj<ITexture> GetOutputTexture(IGPUPipeline *pPipeline) override { return CGPUPipelineNodeBase::GetOutputTexture(pPipeline); }
        virtual void Process(IGPUPipeline *pPipeline) override { CGPUPipelineNodeBase::Process(pPipeline); }
    };

    //**********************************************************************
    class CGPUPipelineSourceNode : public CGPUPipelineNodeBase, public IGPUPipelineSourceNode
    {
        CComPtr<ID3D11Texture2D> m_spSourceImage;
    public:
        CGPUPipelineSourceNode() : CGPUPipelineNodeBase(1)
        {
            m_cpuFlags = D3D11_CPU_ACCESS_WRITE;
            m_bindFlags = D3D11_BIND_FLAG::D3D11_BIND_SHADER_RESOURCE;
        }

        //**********************************************************************
        // IRefCount
        //**********************************************************************
        virtual uint32 AddRef() override { return CRefCount::AddRef(); }
        virtual uint32 Release() override { return CRefCount::Release(); }

        //**********************************************************************
        // IGPUPipelineNode
        //**********************************************************************
        virtual uint32 GetNumberInputs() override { return CGPUPipelineNodeBase::GetNumberInputs(); }
        virtual void SetShader(IShader *pShader) override { CGPUPipelineNodeBase::SetShader(pShader); }
        virtual CRefObj<IShader> GetShader() override { return CGPUPipelineNodeBase::GetShader(); }
        virtual CRefObj<IGPUPipelineNode> GetInput(uint32 index) override { return CGPUPipelineNodeBase::GetInput(index); }
        virtual void SetInput(uint32 index, IGPUPipelineNode *pNode) override { CGPUPipelineNodeBase::SetInput(index, pNode); }
        virtual void SetOutputSize(uint32 width, uint32 height) override { CGPUPipelineNodeBase::SetOutputSize(width, height); }
        virtual uint32 GetOutputWidth() override { return CGPUPipelineNodeBase::GetOutputWidth(); }
        virtual uint32 GetOutputHeight() override { return CGPUPipelineNodeBase::GetOutputHeight(); }
        virtual CRefObj<ITexture> GetOutputTexture(IGPUPipeline *pPipeline) override;
        virtual void Process(IGPUPipeline *pPipeline) override { }

        //**********************************************************************
        // IGPUPipelineSourceNode
        //**********************************************************************
        virtual void SetSource(IGPUPipeline *pPipeline, IImage *pSource) override;
    };

    //**********************************************************************
    class CGPUPipelineSinkNode : public CGPUPipelineNodeBase, public IGPUPipelineSinkNode
    {
    public:
        CGPUPipelineSinkNode(uint32 numInputs) : CGPUPipelineNodeBase(numInputs)
        {
            m_cpuFlags = D3D11_CPU_ACCESS_READ;
            m_bindFlags = (D3D11_BIND_FLAG)0;
        }

        //**********************************************************************
        // IRefCount
        //**********************************************************************
        virtual uint32 AddRef() override { return CRefCount::AddRef(); }
        virtual uint32 Release() override { return CRefCount::Release(); }

        //**********************************************************************
        // IGPUPipelineNode
        //**********************************************************************
        virtual uint32 GetNumberInputs() override { return CGPUPipelineNodeBase::GetNumberInputs(); }
        virtual void SetShader(IShader *pShader) override { CGPUPipelineNodeBase::SetShader(pShader); }
        virtual CRefObj<IShader> GetShader() override { return CGPUPipelineNodeBase::GetShader(); }
        virtual CRefObj<IGPUPipelineNode> GetInput(uint32 index) override { return CGPUPipelineNodeBase::GetInput(index); }
        virtual void SetInput(uint32 index, IGPUPipelineNode *pNode) override { CGPUPipelineNodeBase::SetInput(index, pNode); }
        virtual void SetOutputSize(uint32 width, uint32 height) override { CGPUPipelineNodeBase::SetOutputSize(width, height); }
        virtual uint32 GetOutputWidth() override { return CGPUPipelineNodeBase::GetOutputWidth(); }
        virtual uint32 GetOutputHeight() override { return CGPUPipelineNodeBase::GetOutputHeight(); }
        virtual CRefObj<ITexture> GetOutputTexture(IGPUPipeline *pPipeline) override 
        { 
            return CGPUPipelineNodeBase::GetOutputTexture(pPipeline);
        }
        virtual void Process(IGPUPipeline *pPipeline) override;
        
        //**********************************************************************
        // IGPUPipelineSinkNode
        //**********************************************************************
        virtual CRefObj<IImage> GetOutput(IGPUPipeline *pPipeline) override;
    };

    //**********************************************************************
    class CGPUPipeline : public IGPUPipeline, public CRefCount
    {
        std::vector<CRefObj<IGPUPipelineNode>> m_nodes; // List of interior graph nodes
        std::vector<CRefObj<IGPUPipelineSinkNode>> m_sinkNodes; // List of sink nodes (end of pipeline)
        std::vector<CRefObj<IGPUPipelineSourceNode>> m_sourceNodes; // List of source nodes (beginning of pipeline)
        CRefObj<IRenderer> m_spRenderer;
        CComPtr<ID3D11Buffer> m_spFullQuadVB;
        CComPtr<ID3D11Buffer> m_spFullQuadIB;
        
        void Initialize(IRenderer *pRenderer);
    public:
        CGPUPipeline()
        {
        }
        friend CRefObj<IGPUPipeline> CreateGPUPipeline(IRenderer* pRenderer);
        friend class CGPUPipelineNodeBase;

        //**********************************************************************
        // IRefCount
        //**********************************************************************
        virtual uint32 AddRef() override { return CRefCount::AddRef(); }
        virtual uint32 Release() override { return CRefCount::Release(); }

        //**********************************************************************
        // IGPUPipeline
        //**********************************************************************
        virtual CRefObj<IRenderer> GetRenderer() override;
        virtual void Process() override;
        virtual void RenderQuad(IShader* pShader) override;
        virtual CRefObj<IGPUPipelineSourceNode> CreateSourceNode(IImage *pImage) override;
        virtual CRefObj<IGPUPipelineSinkNode> CreateSinkNode(uint32 numInputs, IShader *pShader) override;
        virtual CRefObj<IGPUPipelineNode> CreateNode(uint32 numInputs, IShader *pShader) override;
        virtual CRefObj<IGPUPipelineNode> CreatePredefinedNode(wchar_t *pShaderName) override;
    };
}
