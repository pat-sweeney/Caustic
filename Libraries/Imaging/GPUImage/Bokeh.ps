//**********************************************************************
// Copyright Patrick Sweeney 2015-2020
// Licensed under the MIT license.
// See file LICENSE for details.
// File: Bokeh.ps
//**********************************************************************
struct VSOutput
{
    float4 pos : SV_POSITION;
    float2 uvs : TEXCOORD0;
};

Texture2D colorTex : register(t0);
SamplerState colorSampler : register(s0);
Texture2D<float> depthTex : register(t1);
Texture2D backgroundTexture : register(t2);
Texture2D<float4> rayTexture : register(t3);
Texture2D<float4> meshNorms : register(t4);
Texture2D<float2> color2Depth : register(t5);

cbuffer VS_CONSTANT_BUFFER : register(b0)
{
    float4x4 colorExt;
    float focusDistance; // Distance to focal plane
    float focusMaxWidth; // Delta where max blur occurs
    float focusWidth; // Delta where everything is in focus
	float BokehRadius;
	float colored;
	float useBackground;
	float renderCOC;
	float showInFocus;
	float showDepth;
	float showHoles;
	float checkDepth;
	float dummy;
	float3 lightPos;
	float dummy2;
	float3 lightClr;
	float dummy3;
	float depthW;
	float depthH;
	float colorW;
	float colorH;
};

float4 PS(VSOutput p) : SV_Target
{
	static const int kernelSampleCount = 16;
	const float2 kernel[kernelSampleCount] = {
		float2(0, 0),
		float2(0.54545456, 0),
		float2(0.16855472, 0.5187581),
		float2(-0.44128203, 0.3206101),
		float2(-0.44128197, -0.3206102),
		float2(0.1685548, -0.5187581),
		float2(1, 0),
		float2(0.809017, 0.58778524),
		float2(0.30901697, 0.95105654),
		float2(-0.30901703, 0.9510565),
		float2(-0.80901706, 0.5877852),
		float2(-1, 0),
		float2(-0.80901694, -0.58778536),
		float2(-0.30901664, -0.9510566),
		float2(0.30901712, -0.9510565),
		float2(0.80901694, -0.5877853),
	};

	float4 bgcolor = backgroundTexture.Sample(colorSampler, p.uvs);

	// Compute circle of confusion
    float ux = p.uvs.x;
    float uy = p.uvs.y;
    int3 pc = int3(ux * colorW, (1-uy) * colorH, 0);
    float depth = depthTex.Load(pc);

	// Our ray texture is in the coordinate space of the original
	// depth map. Thus we need to convert our UVs from color space
	// to depth space.
	float2 depthuvs = color2Depth.Sample(colorSampler, float2(ux, 1.0f - uy));
    int3 rp = int3(depthuvs.x * depthW, (1.0f - depthuvs.y) * depthH, 0);
    float4 ray = rayTexture.Load(rp);
    float4 posWS = float4(ray.xyz * float(depth), 1.0);

	if (showHoles > 0 && depth == 0)
		return float4(1,0,0,1);
	if (showDepth > 0)
		return float4(depth.xxx,1);

	// We want to map our depth such that
	// depth+focusMaxWidth  ... inFocusMinDist ... 0 ... inFocusMaxDist ... depth+focusMaxWidth
	//       -1          ...        0       ... 0 ...        0       ...        +1
	float coc;
	float inFocusMaxDist = focusDistance + focusWidth;
	float inFocusMinDist = focusDistance - focusWidth;
	if (depth > inFocusMaxDist)
		coc = (depth - inFocusMaxDist) / focusMaxWidth;
	else
		coc = (depth - inFocusMinDist) / focusMaxWidth;
	if (renderCOC)
	{
		coc = clamp(coc,-1.0f, +1.0f);
		if (coc < 0.0f)
		  return float4(0.0f,coc,0.0f,1.0f);
		return float4(coc,0.0f,0.0f,1.0f);
	}
	if (depth < focusDistance + focusWidth &&
	    depth > focusDistance - focusWidth)
	{
		if (showInFocus)
			return float4(1.0f,1.0f,0.0f,1.0f);
		float3 clr = colorTex.Sample(colorSampler, p.uvs).xyz;
		float3 normWS = meshNorms.Sample(colorSampler, float2(p.uvs.x, 1.0f - p.uvs.y)).xyz;
		if (length(normWS) == 0.0f)
		    normWS = float3(0.0f, 0.0f, 1.0f);
        float3 lightDirWS = normalize(lightPos.xyz - posWS.xyz);
        float dp = clamp(dot(normalize(normWS), lightDirWS), 0.0f, 1.0f);
		return float4(clr * 0.5 + 0.5 * dp * lightClr, 1.0f);
	}
	if (depth < 0.001f && useBackground > 0)
		return bgcolor;
	if (depth > focusDistance + focusMaxWidth && useBackground > 0)
		return bgcolor;
	if (colored && coc > 0.0f)
		return float4(1,0,0,1);
    coc = clamp(coc,-1.0f, +1.0f);
	coc = BokehRadius * coc;
    float3 color = float3(0.0f, 0.0f, 0.0f);
	int count = 0;
	for (int k = 0; k < kernelSampleCount; k++)
	{
		float2 o = float2(kernel[k].x * coc / colorW, kernel[k].y * coc / colorH);
		float2 uvs = p.uvs + o;
		int3 pc = int3(uvs.x * colorW, (1-uvs.y) * colorH, 0);
		float cdepth = depthTex.Load(pc);
		float deltaDepth = cdepth - depth;
		if (checkDepth >= 1.0f && abs(deltaDepth) >= 0.05)
			uvs = p.uvs;
		float3 clr = colorTex.Sample(colorSampler, uvs).xyz;
		float3 normWS = meshNorms.Sample(colorSampler, float2(uvs.x, 1.0f - uvs.y)).xyz;
		if (length(normWS) == 0.0f)
		    normWS = float3(0.0f, 0.0f, 1.0f);
		float3 lightDirWS = normalize(lightPos.xyz - posWS.xyz);
        float dp = clamp(dot(normalize(normWS), lightDirWS), 0.0f, 1.0f);
		color += float3(clr * 0.5 + 0.5 * dp * lightClr);
		count++;
	}
	
	if (count > 0)
		color *= 1.0 / count;
			
    return float4(color.xyz, 1.0f);
}
