//**********************************************************************
// Copyright Patrick Sweeney 2015-2019
// All Rights Reserved
//**********************************************************************
#include "defs.h"

cbuffer PS_CONSTANT_BUFFER : register(b2)
{
    float4 ambientColor;
    float4 diffuseColor;
    float4 specularColor;
    float4 specularExp;
    float4 transparency;
    matrix viewInv; // View => World
    float4 lightColor[MAX_LIGHTS];
    float4 lightPosWS[MAX_LIGHTS];
    int numLights;
};

float4 PS(VSOutput p) : SV_Target
{
    float3 viewPosWS = mul(float4(0.0f, 0.0f, 0.0f, 1.0f), viewInv).xyz;
    float3 viewDirWS = normalize(viewPosWS - p.posWS);
    float3 color = float3(0.0f, 0.0f, 0.0f);
    for (int i = 0; i < numLights; i++)
    {
        float3 lightDirWS = normalize(lightPosWS[i].xyz - p.posWS);
        float dp = dot(normalize(p.normWS), lightDirWS);
        lightDirWS = reflect(lightDirWS, p.normWS);
        float specdp = saturate(dot(lightDirWS, -viewDirWS));
        float spec = pow(specdp, specularExp.x);
        color.xyz += diffuseColor.xyz * lightColor[i].xyz * dp;
        color.xyz += specularColor.xyz * lightColor[i].xyz * spec;
    }
    return float4(ambientColor.xyz + color, transparency.x);
}
