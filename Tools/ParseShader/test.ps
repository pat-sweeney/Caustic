//**********************************************************************
// Copyright Patrick Sweeney 2015-2016
// Licensed under the MIT license.
// See file LICENSE for details.
//**********************************************************************
#include "defs.h"

Texture2D stexture : register(t0);
SamplerState ssampler : register(s0);

cbuffer PS_CONSTANT_BUFFER
{
	float4 lightPos;
	float4 lightColor;
	float4 ambientColor;
	float4 diffuseColor;
	float4 specularColor;
	float4 specularExp;
	float4 lightPosWS[MAX_LIGHTS];
	float4 transparency;
	matrix viewInv; // View => World
	int numLights;
};

float4 PS(VSOutput p) : SV_Target
{
	float3 viewPosWS = mul(float4(0.0f, 0.0f, 0.0f, 1.0f), viewInv).xyz;
	float3 viewDirWS = normalize(viewPosWS - p.posWS);
	float3 lightDirWS = normalize(lightPosWS.xyz - p.posWS);
	float dp = dot(normalize(p.normWS), lightDirWS);
	lightDirWS = reflect(lightDirWS, p.normWS);
	float specdp = saturate(dot(lightDirWS, -viewDirWS));
	float spec = pow(specdp, specularExp.x);
    return float4(ambientColor.xyz+diffuseColor.xyz*lightColor.xyz*dp+specularColor.xyz*lightColor.xyz*spec,transparency.x);
}